package net.fabricmc.tinyremapper.api;

import org.objectweb.asm.Opcodes;

public interface TrMember {
	/**
	 * Get the owner of the member.
	 */
	TrClass getOwner();

	/**
	 * Get the access opcode.
	 */
	int getAccess();

	/**
	 * Get the name of the member.
	 */
	String getName();

	/**
	 * Get the descriptor of the member.
	 */
	String getDesc();

	/**
	 * Get the ASM visit index of the member.
	 */
	int getIndex();

	/**
	 * Get the type of the member.
	 */
	MemberType getType();

	enum MemberType {
		METHOD,
		FIELD
	}

	/**
	 * Method & Field.
	 * <p>Declared public; may be accessed from outside its package.</p>
	 */
	default boolean isPublic() {
		return (getAccess() & Opcodes.ACC_PUBLIC) != 0;
	}

	/**
	 * Method & Field.
	 * <p>Declared private; accessible only within the defining class and other classes belonging to the same nest (ยง5.4.4).</p>
	 */
	default boolean isPrivate() {
		return (getAccess() & Opcodes.ACC_PRIVATE) != 0;
	}

	/**
	 * Method & Field.
	 * <p>Declared protected; may be accessed within subclasses.</p>
	 */
	default boolean isProtected() {
		return (getAccess() & Opcodes.ACC_PROTECTED) != 0;
	}

	/**
	 * Method & Field.
	 * <p>Declared static.</p>
	 */
	default boolean isStatic() {
		return (getAccess() & Opcodes.ACC_STATIC) != 0;
	}

	/**
	 * Method & Field:
	 * <p> Field: Declared final; never directly assigned to after object construction (JLS ยง17.5).</p>
	 * <p> Method: Declared final; must not be overridden (ยง5.4.5).</p>
	 */
	default boolean isFinal() {
		return (getAccess() & Opcodes.ACC_FINAL) != 0;
	}

	/**
	 * Field only.
	 * <p>Declared volatile; cannot be cached.</p>
	 */
	default boolean isVolatile() {
		return getType().equals(MemberType.FIELD) && (getAccess() & Opcodes.ACC_VOLATILE) != 0;
	}

	/**
	 * Field only.
	 * <p>Declared transient; not written or read by a persistent object manager.</p>
	 */
	default boolean isTransient() {
		return getType().equals(MemberType.FIELD) && (getAccess() & Opcodes.ACC_TRANSIENT) != 0;
	}

	/**
	 * Method only.
	 * <p>Declared synchronized; invocation is wrapped by a monitor use.</p>
	 */
	default boolean isSynchronized() {
		return getType().equals(MemberType.METHOD) && (getAccess() & Opcodes.ACC_SYNCHRONIZED) != 0;
	}

	/**
	 * Method only.
	 * <p>A bridge method, generated by the compiler.</p>
	 */
	default boolean isBridge() {
		return getType().equals(MemberType.METHOD) && (getAccess() & Opcodes.ACC_BRIDGE) != 0;
	}

	/**
	 * Method only.
	 * <p>Declared with variable number of arguments.</p>
	 */
	default boolean isVarags() {
		return getType().equals(MemberType.METHOD) && (getAccess() & Opcodes.ACC_VARARGS) != 0;
	}

	/**
	 * Method only.
	 * <p>Declared native; implemented in a language other than the Java programming language.</p>
	 */
	default boolean isNative() {
		return getType().equals(MemberType.METHOD) && (getAccess() & Opcodes.ACC_NATIVE) != 0;
	}

	/**
	 * Method only.
	 * <p>Declared abstract; no implementation is provided.</p>
	 */
	default boolean isAbstract() {
		return getType().equals(MemberType.METHOD) && (getAccess() & Opcodes.ACC_ABSTRACT) != 0;
	}

	/**
	 * Method only.
	 * <p>Declared strictfp; floating-point mode is FP-strict.</p>
	 */
	default boolean isStrict() {
		return getType().equals(MemberType.METHOD) && (getAccess() & Opcodes.ACC_STRICT) != 0;
	}

	/**
	 * Method & Field.
	 * <p>Declared synthetic; not present in the source code.</p>
	 */
	default boolean isSynthetic() {
		return (getAccess() & Opcodes.ACC_SYNTHETIC) != 0;
	}

	/**
	 * Field only.
	 * <p>Declared as an element of an enum class.</p>
	 */
	default boolean isEnum() {
		return getType().equals(MemberType.FIELD) && (getAccess() & Opcodes.ACC_ENUM) != 0;
	}
}
